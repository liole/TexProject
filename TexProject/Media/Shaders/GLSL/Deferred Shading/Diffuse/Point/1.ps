#version 330 core

uniform sampler2D Texture1;
uniform sampler2D Texture2;
uniform sampler2D TextureDepth;

uniform float camFar;
uniform float camFarXNear;
uniform float camFarMNear;

uniform vec3 lightPos;

in vec4	pView;
in vec2 pTex;

out vec4	Out_Color;
out vec4	Out_Specular;

vec3 decodeNormal(vec2 n);
float specularCookTorrance(vec3 _normal, vec3 _light, vec3 _view, float roughness_val);


void main()
{
	vec4 Tex1 = texture(Texture1,pTex);
	vec4 Tex2 = texture(Texture2,pTex);

	//vec3 Pos = P_Rec.xyz * ( Camera_zFarXNear / (Camera_zFar - Tex4*Camera_zFar_Near) );
	float depth = texture(TextureDepth,pTex).x; if(depth >= 1.0f) discard;
	depth = camFarXNear / (camFar - depth * camFarMNear); 
	vec3 pPos = pView.xyz * depth;

	vec3 viewVec = normalize(pPos);
	vec3 Normal = normalize(decodeNormal(Tex2.xy));
	//vec3 Normal = normalize(Tex2.xyz*2-1);

	vec3 dir = normalize(lightPos - pPos);

	float diffInt = clamp( dot(dir,Normal), 0.0f,1.0f);	//min(max( length(lightPos-pPos)/20.0f ,0.0f),1.0f);

	Out_Color = vec4( Tex1.xyz*diffInt ,1.0f);

	vec3 refVec = reflect(viewVec,Normal);

	float specInt = specularCookTorrance(Normal,dir,-viewVec,0.05f);

	Out_Specular = vec4(vec3(specInt)*Tex2.w,0.0f);

	//Out_Color = vec4(dir,1.0f);
	//Out_Color = vec4(vec3(diffInt),1.0f);
	//Out_Color = vec4(pPos,1.0f);
	//Out_Color = vec4(depth,0,0,1);//texture(Texture1, pTex);
	//Out_Color = vec4(Normal,1.0f);
	//Out_Color = vec4(Tex2.xy,0.0f,1.0f);
	//Out_Color = vec4(normalize(pView.xyz),1.0f);
	//Out_Color = vec4(1,1,1,1);
}

vec3 decodeNormal(vec2 n)
{
	n = n*2-1;
	n = vec2(radians(n.x*90.0f),radians(n.y*180.0f));
	float c = cos(n.x);
	return vec3(c*sin(n.y),-sin(n.x),c*cos(n.y));
}
float specularCookTorrance(vec3 _normal, vec3 _light, vec3 _view, float roughness_val)
{
	if(roughness_val <= 0.0) return 0.0;
	vec3  half_vec = normalize( _view + _light );
	float NdotL    = max( dot( _normal, _light ), 0.0 );
	float NdotV    = max( dot( _normal, _view ), 0.0 );
	float NdotH    = max( dot( _normal, half_vec ), 1.0e-7 );
	float VdotH    = max( dot( _view,   half_vec ), 0.0 );
	float geometric = 2.0 * NdotH / VdotH;
	geometric = min( 1.0, geometric * min(NdotV, NdotL) );
	float r_sq          = roughness_val * roughness_val;
	float NdotH_sq      = NdotH * NdotH;
	float NdotH_sq_r    = 1.0 / (NdotH_sq * r_sq);
	float roughness_exp = (NdotH_sq - 1.0) * ( NdotH_sq_r );
	float roughness     = exp(roughness_exp) * NdotH_sq_r / (4.0 * NdotH_sq );
	float fresnel       = 1.0 / (1.0 + NdotV);
	float Rs = min(1.0, (fresnel * geometric * roughness) / (NdotV * NdotL + 1.0e-7));
	return Rs;
}
